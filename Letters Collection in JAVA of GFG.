//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String arr[] = in.readLine().trim().split("\\s+");
            int n = Integer.parseInt(arr[0]);
            int m = Integer.parseInt(arr[1]);
            int mat[][] = new int[n][m];
            for(int i = 0;i < n;i++){
                String a[] = in.readLine().trim().split("\\s+");
                for(int j = 0;j < m;j++)
                    mat[i][j] = Integer.parseInt(a[j]);
            }
            int q = Integer.parseInt(in.readLine());
            int queries[][] = new int[q][3];
            for(int i = 0;i < q;i++){
                String a1[] = in.readLine().trim().split("\\s+");
                for(int j = 0;j < 3;j++)
                    queries[i][j] = Integer.parseInt(a1[j]);
            }
            Solution ob = new Solution();
            List<Integer> ans = new ArrayList<Integer>();
            ans = ob.matrixSum(n, m, mat, q, queries);
            for(int i = 0;i < q;i++)
                System.out.println(ans.get(i));
        }
    }
}
// } Driver Code Ends




//User function Template for Java

class Solution{
    static List<Integer> matrixSum(int n, int m, int mat[][], int q, int queries[][])
    {
        // code here
        int[] dx1 = {-1,-1,-1,0,0,1,1,1};
        int[] dy1 = {-1,0,1,-1,1,-1,0,1};
        int[] dx2 = {-2,-2,-2,-2,-2,-1,-1,0,0,1,1,2,2,2,2,2};
        int[] dy2 = {-2,-1,0,1,2,-2,2,-2,2,-2,2,-2,-1,0,1,2};
        List<Integer> al = new ArrayList<>();
        for(int x=0; x<q; x++)
        {
            int sum = 0;
            int i = queries[x][1], j = queries[x][2];
            if(queries[x][0]==1)
            {
                for(int k = 0; k<dx1.length; k++)
                {
                int n_x = i+dx1[k], n_y = j+dy1[k];
                if(isSafe(n_x, n_y,n,m))
                sum += mat[n_x][n_y];
            }
        }
        else{
            for(int k = 0; k < dx2.length; k++)
            {
                int n_x = i+dx2[k], n_y = j+dy2[k];
                if(isSafe(n_x, n_y, n, m))
                sum += mat[n_x][n_y];
            }
        }
        al.add(sum);
    }
    return al;
}
static boolean isSafe(int i, int j, int n, int m)
{
    if(i<0 || i>=n || j<0 ||j>=m)
    return false;
    return true;
}
}
